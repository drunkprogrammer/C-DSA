class Solution {
public:
    double findMedianSortedArrays(vector<int>& nums1, vector<int>& nums2) {
      int m=nums1.size();
      int n=nums2.size();
      
      if(m>n)
      {
      vector<int> nums3;
      nums3=nums2;
      nums2=nums1;
      nums1=nums3;
      int temp=m;
      m=n;
      n=temp;
      }

     int imin=0;
      int imax=m;
      int half=(m+n+1)/2;
      while(imin<=imax)
      {
          int i=(imin+imax)/2;
          int j=half-i;
          if( i<imax && nums2[j-1]>nums1[i] )
          {
               imin=imin+1;
          }
         
          else if( i>imin && nums1[i-1]>nums2[j] )
          {
              imax=imax-1;
          }
          else
          {
              int maxleft=0;
              if(i==0)
              {
                  maxleft=nums2[j-1];
              } 
              else  if(j==0)
                  {
                  maxleft=nums1[i-1];
                  }
              else
                 {
                  if(nums1[i-1]>nums2[j-1])
                      maxleft=nums1[i-1];
                  else
                      maxleft=nums2[j-1];
                 }
              if((m+n)%2==1) 
              {

                  return maxleft;
              }
                  
              int minright=0;
              if(i==m) 
              {
                   minright=nums2[j];
              }
                 
              else if(j==n)
              {
                   minright=nums1[i];
              }  
              else 
              {
                  if(nums1[i]<nums2[j])
                  {
                       minright=nums1[i];
                  }
                    
                  else
                  {
                       minright=nums2[j];
                  }
                 
              }
          return (minright+maxleft)/2.0;  
          }
      }        
        return 0.0;  
    }
};