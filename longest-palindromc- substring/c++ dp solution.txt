#include<string>
class Solution {
public:
    string longestPalindrome(string s) {
        string rs=s;
        reverse(s.begin(),s.end());
        int size=s.length();
        if(size==1)
            return rs;
        if(size==0)
            return "";
        int dynamictable[size][size];
        int longest=0;
        int start=-1;
        for(int i=0;i<size;i++)
        {
            dynamictable[0][i]=(s[0]==rs[i])?1:0;
        }
         for(int i=1;i<size;i++)
        {
            dynamictable[i][0]=(rs[0]==s[i])?1:0;
            for(int j=1;j<size;j++)
            {
                    dynamictable[i][j]=(s[i]==rs[j])?dynamictable[i-1][j-1]+1:0;
            }
        }
        for(int i=0;i<size;i++)
        {
            for(int j=0;j<size;j++)
            {
                if((i+j+1==size || rs[j+1-dynamictable[i][j]]==s[i])&& dynamictable[i][j]>longest)
                {
                       longest=dynamictable[i][j];
                        start=j-longest+1;
                }
            }
              
            
        }
     return   rs.substr(start,longest);
    }
};