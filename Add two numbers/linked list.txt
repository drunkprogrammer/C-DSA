/**
* Definition for singly-linked list.
* struct ListNode {
*     int val;
*     ListNode *next;
*     ListNode(int x) : val(x), next(NULL) {}
* };
*/

class Solution {
public:
	ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
		ListNode *l3 = new ListNode(0);
		ListNode *res = l3;
		int leave, value, carry;
		while (1)
		{
			if (l1 == NULL && l2 == NULL)
			{
				return res;
			}
			carry = 0;
			value = l1->val + l2->val;
			if (value >= 10)
			{
				leave = value - 10;
				carry = 1;
			}
			else
				leave = value;
			l1 = l1->next;
			l2 = l2->next;


			while (l1 != NULL && l2 != NULL)
			{
				l3->val = leave;
				value = l1->val + l2->val + carry;
				if (value >= 10)
				{
					leave = value - 10;
					carry = 1;
				}
				else
				{
					leave = value;
					carry = 0;
				}
				l3 = l3->next = new ListNode(0);
				l1 = l1->next;
				l2 = l2->next;

			}
			while (l1 == NULL && l2 != NULL)
			{
				l3->val = leave;
				l2->val = l2->val + carry;
				if (l2->val<10)
				{
					leave = l2->val;
					carry = 0;
				}

				else
				{
					leave = l2->val - 10;
					carry = 1;
				}
				l2 = l2->next;
				l3 = l3->next = new ListNode(0);
			}
			while (l1 != NULL && l2 == NULL)
			{
				l3->val = leave;
				l1->val = l1->val + carry;
				if (l1->val<10)
				{
					leave = l1->val;
					carry = 0;
				}

				else
				{
					leave = l1->val - 10;
					carry = 1;
				}
				l1 = l1->next;
				l3 = l3->next = new ListNode(0);

			}
			if (l1 == NULL && l2 == NULL)
			{
				l3->val = leave;
				if (carry == 1)
				{
					l3 = l3->next = new ListNode(0);
					l3->val = 1;
				}
				return res;
			}
		return res;
	}
};
