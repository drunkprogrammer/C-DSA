/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */

class Solution {
public:
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {
      /*  if(l1==NULL)
            return l2;
        if(l2==NULL)
            return l1;
            *the problem says two linked list are not null
     */
        ListNode *l3 = new ListNode(0);
        ListNode *res = l3;
        int leave,value,carry;
        while(1)
        {
            if(l1==NULL && l2==NULL)
           {
                return res;
           }
            carry=0;
            value=l1->val+l2->val;
            if(value>=10)
            {
             leave=value-10;
             carry=1;
            }
           else
            leave=value;
            l1=l1->next;
            l2=l2->next;
            
               
          while(l1!=NULL && l2!=NULL)
          {
              l3->val=leave;
              value=l1->val+l2->val+carry;
              if(value>=10)
              {
                  leave=value-10;
                  carry=1;
              }   
              else
              {
                  leave=value;
                  carry=0;
              }
               l3=l3->next=new ListNode(0);
               l1=l1->next;
               l2=l2->next;
            
          }
        while(l1==NULL && l2!=NULL)
           {
            /*l2->val=l2->val+carry;
            if(l2->val<10)
            {
                l3->val=l2->val;
                carry=0;
            }
            
            else
            {
                leave=l2->val-10;
                carry=1;
                l3->val=leave;
            }
            l2=l2->next;
            l3=l3->next=new ListNode(0);*/
             l3->val=leave;
            l2->val=l2->val+carry;
            if(l2->val<10)
            {
                leave=l2->val;
                carry=0;
            }
                
            else
            {
                leave=l2->val-10;
                carry=1;
            }
            l2=l2->next;
            l3=l3->next=new ListNode(0);
          }
         /* while(l1==NULL && carry ==0 && l2!=NULL)
          {
              l3->val=leave;
              if(l2==NULL)
                  return l3;
              l3=l3->next=new ListNode(0);
              l2=l2->next;
              leave=l2->val;
          }*/
          while(l1!=NULL && l2==NULL)
          {
            l3->val=leave;
            l1->val=l1->val+carry;
            if(l1->val<10)
            {
                leave=l1->val;
                carry=0;
            }
                
            else
            {
                leave=l1->val-10;
                carry=1;
            }
            l1=l1->next;
            l3=l3->next=new ListNode(0);
              
          }
             if(l1==NULL && l2==NULL)
             {
               l3->val=leave;
               if(carry==1)
               {
                   l3=l3->next=new ListNode(0);
                   l3->val=1;
               }
               return res;
             }
          /*while(l1!=NULL && carry ==0 && l2==NULL)
          {
              l3->val=leave;
              if(l1==NULL)
                  return l3;
              l3=l3->next=new ListNode(0);
              l1=l1->next;
              leave=l1->val;
          }*/
        }
       
        /*int a=0;
        int carry=1;
        while(1)
        {
             int values=l1->val+l2->val;
             if(values<10)
             {
                 l3->val=values;
                 l1 = l1->next;
             }
             else
             {
                     l3->val=values-10;
                     l1 = l1->next;
                     if(l1!=NULL)
                     {
                         a=l1->val;
                         l1->val=a+1;
                     }
                     else
                     {
                        l3 = l3->next = new ListNode(0);
                        if(l2->next==NULL)
                        l3->val=1;
                        else
                        l2->next->val=l2->next->val+1;
                     }

             }    
             l2 = l2->next;
             while(l2!=NULL&&l1==NULL)
             {
                 l3 = l3->next = new ListNode(0);
                 l3->val=l2->val;
                 l2=l2->next;
             }
            while(l1!=NULL&&l2==NULL)
             {
                 l3 = l3->next = new ListNode(0);
                 l3->val=l1->val;
                 l1=l1->next;
             }
            if(l1==NULL && l2==NULL)
                break;
             l3 = l3->next = new ListNode(0);
        }*/
        return res;
    }
};
